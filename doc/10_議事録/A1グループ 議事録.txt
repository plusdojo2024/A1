A1グループ 議事録

2024年6月4日（火）

＜要件定義メモ＞

ペルソナから挙げられる当人の問題点
子供との時間が取れない
旦那が育児に参加しない(出来ない)
仕事で時間がない
旦那がいつ帰ってくるかわからない


＜ペルソナに基づき作成するアプリの概要候補＞

子供との時間が取れない
→仕事中でも子供と関わることのできる機能
旦那が育児に参加しない(出来ない)
→夫婦間での予定管理
google calenderとの同期を選択できる。
旦那がいつ帰ってくるかわからない
→チャット内で簡潔に帰宅の旨やご飯の有無をチェックボックスなどで選択
仕事で時間がない
→時短で文章を送ること出来るような定型文
メール自動作成機能

全体像の候補
子育て家庭応援アプリ
(ほのぼのした雰囲気)


機能要件(どんなのがあったらいいな)
新アカウント作成
仕事中でも子供と関わることのできる機能
夫婦間での予定管理=google calenderとの同期を選択できる。
チャット内で簡潔に帰宅の旨やご飯の有無をチェックボックスなどで選択
時短で文章を送ることの出来るような定型文
メール自動作成機能
子供モード(簡易チャット)

【本日のチーム目標】
長期目標
和気藹々とした雰囲気で発言しやすい雰囲気を作る
短期目標
意見を出し合ってペルソナを完成させよう


前回の要件定義の復習
・既存のサービスとの重複
→それぞれの機能が独立しているというのも原因の一つ？
・使う側の状態があまり反映されていない
→子供一人ではアプリを使わないなど
・コミュニケーションツールとして扱うのに機械的な返答はナンセンス
→夫婦が仲悪くなっちゃう

＜本日のtodoリスト＞

ペルソナの作成
昨日出した情報から細かい人物像を作ろう！
→一人ずつその人へのイメージの質問を二巡して回答はチャットに送る
(例:猫派か犬派か、何時に寝るかなど)
一応理由とか補足もほしいかも！

人物像が完成したら欲求の満足、不満足点を考えよう！
→仕事・日常生活・人間関係などをイメージで考えてみる
(例:同僚から怖がられる・職質される・貧乏ゆすりが止まらないなど)

//出来ればここまで50分くらいで終わらせたい

アプリで解決することが出来そうなものをまとめよう！
→家が狭いとか給料が低いとかは自分たちの領分じゃなさそうだな...
すごく小さな悩みに焦点を当ててみる
//30分は必要

ここまでで行き詰りを感じたらペルソナ作成からもう一度(今度は二個作ってもいいかも)

アプリでの解決法を考えよう！
→実装に至ってというよりもどうすれば解決できるか
小さな悩みなら小さな悩みなだけ画期的なアイデアになりそう

午前目標はここまで、行き詰ってどうしようもなくなったらまたペルソナから考えるもよし

アプリとして作成する際に必要な機能を具体的に考えよう！
名刺管理でいうところの検索削除更新など、具体的にしていこう

実装に必要な構造を”少し”考えてみよう！


2024年6月5日（水）

【本日のチーム目標】
アプリの方向性を決定する


【本日の予定】
10時～ペルソナのプロフィールづくり　人物固め
11時～アプリのテーマ設定
16時～要件定義書作成

＜テーマ＞（案）
・コーヒーレビュー
・ライフハック投稿専用アプリ
→レビュー：一番面白く実用化しやすい
　　　　　　投稿だけではなく、＋αの付加価値をつける必要がある
　　　　　　データ量が多くなりそう　どう投稿するか
・美少女が出てくる禁煙ゲーム
・趣味共有匿名チャット
→民度をどこまで保つか　悪口等の書き込みを優しい言葉に変換してくれる機能を付けるか
・失敗談投稿アプリ

写真、スタンプを投稿できる
コメント機能
人の投稿をクリックするとその人に反応を伝えることができる
↓


「失敗談投稿アプリ」
利用者は不特定多数で失敗談専用SNSのような感覚。
→ざっくばらんな投稿型SNSとの差別化

・完全匿名（Twitterと差別化できる？）
公開アカウントではなく、鍵付きアカウント（匿名アカウント）として匿名/公開設定にできる（ユーザーネームを匿名にするか、公開するか選択できる）
→匿名アカウントからアンチコメントが飛んでくる可能性あり
匿名の人に対してはお気に入り登録できない

・コメント欄のみ匿名
→
→フォロワー稼ぎを目的にはしたくないのでフォロワー表示はなしの予定

アカウント登録時に職や年齢、性別などの基本情報を登録して投稿を職ごとや年齢ごとにソートすることが出来るようにする


＜実装したい機能＞
・本名ではなく匿名で、
ユーザーごとのハンドルネームやフォロー機能(人のお気に入り機能)を実装
→おんなじ境遇の人と話せる

・投稿へはいいね機能やコメント機能を実装
・コメントのON/OFFを切り替えることができる
・コメントを全員が見れるようにするか、DMで投稿者だけに見れるようにするか
・いいね数の多い投稿ランキングの表示
・人のお気に入り登録ができる
・慰めてもらったお礼にご褒美コメント（ありがとうスタンプ等）を返す
　そのご褒美コメントの数をためてランキング化する
・ホーム画面のイラストを着せ替え出来る
・内容のネガティブ度を選択して投稿に反映させる

＜Twitterとの差別化＞
内容のジャンルごとに投稿の種類を変える（切り分ける）ことができる



課題:失敗談のみの書き込みを促す方法
　　つい書き込みたくなるような仕組みの実装








「失敗談投稿アプリ」

利用者は不特定多数で失敗談専用SNSのような感覚。
失敗談オンリーなので他人の目は気にしない

☆既存SNSとの差別化　
・投稿時,投稿へのコメント時にユーザー公開の有無を自分で選択できる（匿名での投稿が可能）
→匿名コメント可能だとアンチが湧かないか？　A.投稿者がコメント欄のON,OFFを選択できる機能、他のユーザーへのブロック機能を付ける

・フォロワー数の表示はなし。SNSのフォローに似た機能で、お気に入り機能がある（お気に入り欄から見たいユーザーのプロフィールに行ける）

・失敗談専用なので、見たくもない他人のハッピーは出てこない

・アカウント登録時に職や年齢、性別などの基本情報を登録して投稿を職業や年齢ごとにソートすることが出来るようにする

☆実装したい機能
・本名ではなく匿名で、
ユーザーごとのハンドルネームやフォロー機能(人のお気に入り機能)を実装（匿名投稿に対しては適用されない）
→おんなじ境遇の人と話せる・見つけられる

・投稿へはリアクション機能やコメント機能を実装
・コメントのON/OFFを切り替えることができる
・コメントの公開ON、OFF機能で全員が見れるようにするか、投稿者だけに見れるようにするか
・リアクションの多い投稿ランキングの表示
・ユーザーへのお気に入り登録ができる
・コメントで慰めてもらった際に、そのユーザーへお礼にご褒美（ありがとうスタンプ等）を返せる
　そのご褒美の数に応じて特典や、ランキング化をする
・ホーム画面のイラストを着せ替え出来る
・投稿時にネガティブ度を選択し、それに応じてデザインも変わる（深刻なほど暗くなど）

最終更新日時からの表示
ご褒美の数に応じてアイコンに王冠が増えていく
キャラクターの育成（失敗するたびにアバターが成長していく）
失敗の後日談を投稿しやすいような仕組み
失敗の克服度合いに対応してポイントが加算される

2024年6月6日(木)

本日のチーム目標
長期:和気藹々とした雰囲気で発言しやすい雰囲気を作る
短期:要件定義書を完成させる

本日の予定
13-15　昨日までの仕様課題の解決
15-　要件定義書の作成

前半は外部設計の講義

ターゲット年齢を決めよう
→学生はネタが多い、歳が上がるごとにキツイ

要件定義メモの洗い出し
ソートの項目について
・深刻度別のグループ化
・新卒何年目かや現職の就業何年目かごとにグループ化
・解決済み投稿か未解決済み投稿

育成要素に作用するポイントの取得条件
→失敗から学ぶというスタンスを保つために、後日談の投稿の解決と失敗談の投稿を成長要素としておく。(この二つの付与ポイント比を設定し、後日談の投稿に重い比重を置く)
→後日談を投稿しない状態で放置すると枯れる

後日談は日数を縛るのではなくメールボックスのように未解決投稿を貯めて表示する。

失敗談へのいいね数と後日談への参考になったリアクション数をランキング化

投稿に対するコメントへのご褒美として譲渡されるポイントは規定数を超えるとアイコンに王冠が追加される。

育成から離れると育成要素を主人公の成長としてゲームをホーム画面に搭載してレベルを上げて敵を倒していく。

投稿数を集計してそれで敵を倒す。

→解決した後日談の投稿でアプリ内通貨がたまる
アプリ内通貨を用いて肥料や水などを購入しそれぞれのアイテムを使用することで育てたい花の種類が決定される。

失敗談から見える自己マネジメント
→それだったら匿名化でもいい？

失敗談を成功談のアプリケーションに変えても成り立つものでは機能的な意味合いは薄い
→自分たちの定義だけでアプリを成り立たせてはいけない

現状制作していたアプリは”今回の課題の本質である仕様というものにそぐわない”
→このアプリだから使える仕様を考えなくてはいけない

—リセット------
失敗談投稿アプリからは一度離れる。

ペルソナに対してアプローチ方法について
時間的な問題もあるので再度作成するのではなく新しいアイデアを思いつきたい。

2024年6月7日（金）
今日の目標：折れない！めげない！諦めない！～白紙化を乗り越えて～

仕切り直して新しい方向で考えてみる。(一旦「失敗共有アプリ」から離れる。)
・座り方の矯正(腰が痛い)
・一人の時間を作れるアプリ(人の介抱などに苦戦)

新ペルソナ「SEプラスの講師陣」
・生徒の進行度がわかりにくい。
6/5の例題の進捗を先生側は直接確認しないといけなかった。

・機能候補
「自動採点：例題と結果を設定する、生徒側が解いてコンパイル→出力すると出力内容が講師側に飛ぶ、結果と生徒側の出力結果を比較することで誰が解けたか解けなかったかが一目でわかるようになる。」→「正答率が一目でわかる。間違えた内容が分かる。」
「途中式を確認できるようにしたい、→段位認定は結果さえあってれば通ってしまう。」
「どこがわからないか判別：エクリプスの画面から画像認識、赤点の行を画像の文字読み取りで講師側に飛ぶ。」
→実現がむずかしい、途中式を見ないといけない、匿名機能はない、正解判定基準の設定



「「ここがわからない」を報告するに留めておく」
→板書に講師がマーカーを引く→そこから生徒の理解度を記入できるようにする。
マーカーを引いた部分の理解度順に並べ替えることができる。
「単語、文章から吹き出しで理解度選択がでてくる。簡単に設定できる。」
「↑　メソッド　理解度に応じて単語のマーカーの色が変わる(講師側の未確認可能)」
「プログラムのエラーの内容をまとめる」



「反復練習　（メソッドの内容を付け替える。）」

・状況が伝わっていない。(ZOOMのリアクションだけだと機能不足)
・毎朝の質問回答は間に合っていないんじゃないか。(講義でここから全部分からないみたいな状況になりがち)
・どれくらいわかってないかを送信しやすくすること（匿名）
・理解度報告を最後にやると遅いんじゃないか。逐一報告できればいい。
・改造→書き換えただけになるだけ、練習問題がほしい。
・移動時間で復習時間の確保がしんどい
・「何がわかっていないか分からない」がまとまっていたら分かりやすいのではないか。
・匿名で質問したい。
・復習する時間の時短を実現したい。(時間が足りないから増やすってのは難しい)

ウェビナー講師側の視点
・ZOOMのリアクションがしょぼい。→理解度としてのリアクションをつける
・分かったかどうかが１，０でしか判別できない。→リアクションの種類を”少し”増やす、コメント機能
・何がわかってないかを見える化出来るようにする。→生徒からの理解度を各単語ごと？リアルタイムで表示（グラフ？色分け？）
・理解度のグラフを作成してほしい。例：オブジェクト指向の何がわからないかまで見えるように。
・受講生の理解度がリアルタイムでわからないから時間の取り方がわからない　←それな


クラス講師側の視点
・わからない人集まってーみたいな？→スラックの匿名版...メンバーのグループ化機能
・学生が問題に対してどれくらい理解していないかがわからない

学生側の視点
・わからないところがわからない→単語ごとに理解できてるか判定？→管理（グラフ化？リスト化？）
・匿名で理解状況を知らせたい（コメントも）→各単語？に対して理解度を簡単に報告できる機能（コメントもできる）→さらにそれをグラフ化するとか？←たしかに！
・コメントにもリアクションして共感を伝えたい→まあそのままの意味
・反応の見落としがある→空きスペースに反応していないものをまとめる


理解度報告のリアルタイム化・簡易化、復習の高速化、質問の匿名化。
板書アプリ一つで自分の理解度がわかる。
講師と生徒どっちに寄り添う？

機能一覧
・ログイン機能　ログイン画面は講師も生徒も同じ
・アカウント作成機能　講師と受講生でアカウント画面を別にする。
・板書機能
　マーカーを付けた場所へのリアクション(理解度・コメント)が可能になる機能
　クラスの板書と全体の板書をタブごとに分ける。（全員がのぞけるが、リアクションは自分のクラスのみ）(誰がどのリアクションをしたかは講師のみが確認できる)
ファイル添付
・リアクション機能
　マーカー部分へのリアクション（理解できた～理解できなかったの幅で4項目用意）
→理解度報告
　コメントへのリアクション
→共感(いいねみたいな感じ)
　問題へのリアクション機能
→わかったわからない的な

・リアクションの統計機能
　板書に対するリアクションの統計(生徒も見える)
　→全体の何割が理解しているかを理解度を用いて分析する機能　
　
　自身のリアクションに対する統計
　→生徒個人が自分の回答した内容(理解度)を振り返る機能

・コメント機能
マーカー部分へのコメント
全体のコメント　

・クラスごとのグループ化機能
　クラスタブと全体タブを選択して記入。
●懸念点　マーカーなどのグラフィカルな処理は難易度が高いため、テキストボックスを用いたコメント式にした方がいいのではないだろうか。

(保留)ファイルの添付
(保留)文書をテキストファイルで保存

片方のみができる機能
講師のみの機能（クラス講師とウェビナー講師の機能に差はない）
理解度を押した人間（押してない人間）を閲覧できる。
クラスやグループの板書
マーカーによって生徒に理解度を募る
ファイル添付

生徒のみの機能
自分のクラスの理解度の報告
リアクション
マーカーにコメント出来るのは生徒のみ←コメントへのリアクション
自分のリアクション(理解度)の履歴と統計
未リアクションへの警告

(保留)自分のグループへの板書の作成や書き込み

未確定
・リアルタイムで理解度を変更できるようにしたい。
→再講義を受けて、後から分かったら直せるようにしたい。



2024年6月10日（月）
本日のチーム目標
長期:和気藹々とした雰囲気で発言しやすい雰囲気を作る
短期:要件定義書を完成完成させる

本日の予定
午前
  ～9:50　内部設計について（座学）
10:00～　画面構成について、アプリ名について
11:40～　要件定義書の続き
午後
13:00～　要件定義書の続き
14:10～　保留にしていた問題機能について
15:45～　講師からのレビュー
16:20～　外部設計



【画面構成について】
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
※【外部設計】にて変更点あり

（板書ページ）
板書機能
・マーカー機能の使い方
・ファイル添付…上に機能ボタンを付ける　
・板書タブ分け...板書の上にタブ（付箋みたいな）
・理解度の詳細...

各コメント機能
・マーカーへの質問...板書の左隣　いいねの隣にいいね数
・全体へのコメント...板書の右隣　
・問題への質問...問題をどこに着けるか自体を保留

未回答警告機能...板書の右隣全体コメントの上


（別ページ）
マイページ
・理解度履歴
・質問履歴



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
【アプリ名について】
・クラスボード　←とりあえずコレ
・+kokuban
・マッカーせなさい
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
【要件定義書】
・それぞれの機能の概要...全員で分担して記入

1.1板書機能
機能名	板書機能
概要	板書にテキストを入力できる
処理内容	板書にテキストを入力し、リアルタイムで更新する
想定利用者	講師
備考	生徒側にも反映される


1.2 マーカー機能
機能名	マーカー機能
概要	マーカーを引いた単語や文章について理解度を調査できる
処理内容	マーカーモードにし板書に入力されたテキストにマーカーを引くことで自動的に理解度が調査される
想定利用者	講師
備考	


1.3板書タブ分け機能
機能名	板書タブ切り替え機能
概要	複数の板書の表示をタブ形式で切り替え可能にする
処理内容	タブクリック時にタブに対応した板書に表示が切り替わる
想定利用者	登録済みユーザー
備考	同一ページ内での処理のため画面遷移を行わない


1.4 ファイルの添付機能
機能名	ファイルの添付機能
概要	外部のファイルを表示し、第三者がそれをダウンロード可能にする機能
処理内容	指定ファイルを板書内にアップロードすることが出来る機能
想定利用者	添付/講師 ダウンロード/全員
備考	ドラッグアンドドロップか、ファイル名の選択で指定ファイルをアップロードすることができる。

2.1 マーカー部分へのコメント
機能名	マーカー部分へのコメント機能
概要	講師が引いたマーカー部分に対して受講生アカウントからコメントを送信することが可能になる機能。
想定としては受講者からマーカー部分に対する質問や疑問点が主。
処理内容	板書に対して講師アカウントでマーカーを引いた部分に対して、受講者アカウントからのコメント送信が可能であり、そのコメントがリアルタイムで更新され、画面に反映される機能。
コメントは画面端にリアルタイムで更新・表示され、各マーカーごとのコメントはマーカー部をクリックすることで画面端の別場所に表示される。
想定利用者	コメント部の設定/講師 コメント送信/受講者アカウント
コメント閲覧/全員 コメント送信主の確認/講師
備考	コメント自体の閲覧は全アカウントが可能。
コメント送信者の詳細は講師アカウントでのみ確認が可能。

2.2 全体のコメント
機能名	講義全体へのコメント機能
概要	講師側の設定関係なく、常に受講生アカウントからのコメントを送信することが可能な機能。
処理内容	常に受講者アカウントからのコメント送信が可能であり、そのコメントがリアルタイムで更新され、画面に反映される機能。
想定利用者	コメント閲覧/全員 コメント送信主の確認/講師
備考	コメント自体の閲覧は全アカウントが可能。
コメント送信者の詳細は講師アカウントでのみ確認が可能。


2.3 問題へのコメント　保留
機能名	問題へのコメント機能
概要	講師が作成した問題に対して受講生がコメントを送ることができる機能
処理内容　	受講生がコメントを送信すると講師がコメントを確認できる
想定利用者	コメント閲覧/全員　コメント送信/受講生アカウント　
コメント送信主の確認/講師
備考	


3.1 マーカー部分へのリアクション
機能名	マーカー部分へのリアクション
概要	マーカー部分への自分の理解度をリアクションで示すことができる
処理内容	受講生がリアクションを送ると講師がリアクションを確認できる
想定利用者	リアクション閲覧/全員　リアクション送信/受講生アカウント　受講生のリアクション数の確認/講師
備考	


3.2 全体・マーカーコメントへのリアクション機能
機能名　全体・マーカーコメントへのリアクション
概要　全体コメントとマーカーへのコメント（質問）に対するリアクション（いいね）ができる
処理内容	質問のところにあるいいねボタンをクリックすると、色が変わる
想定利用者	登録済みユーザー 生徒側
備考	


3.3 問題へのリアクション　保留
機能名	
概要	
処理内容	
想定利用者	
備考	


4.1.1 マーカー部分へのリアクション統計機能
機能名	　　マーカー部分へのリアクション統計機能
概要	　講師が引いたマーカー部分に来た生徒の「理解度」の割合をグラフで確認することができる。また「詳細」の項目をクリックすることで、画面内に「だれがどのリアクションをしたか履歴」がウィンドウに表示される。
処理内容	　マーカー部分をマウスに充てるとホバーで項目が浮き上がる。
想定利用者	講師
備考	



4.1.2 コメントへのリアクション統計機能
機能名	　　　コメントへのリアクション統計機能
概要	　　　コメントについたリアクション(いいね数)を表示することができる。
処理内容	画面に「いいね」の数が表示される。
想定利用者	登録済みユーザー
備考	


4.2.1 理解度リアクション見返し機能
機能名		理解度リアクション見返し機能
概要		リアクションした板書履歴を一覧化、
全体数値をグラフ化してマイページ内で閲覧可能にする機能
処理内容	マイページ内に利用者本人のリアクション済板書履歴を一覧化、
他の受講生の総合数値をグラフ化して表示	
想定利用者	登録済み受講生(、講師)
備考		他の受講生のリアクションの数値をグラフで閲覧可能	


4.2.2 理解度リアクション促し機能
機能名		理解度リアクション促し機能
概要		マイページ(もしくは板書画面)に赤字のメッセージを表示、
板書画面に板書を一覧表示
処理内容	画面にエラーメッセージと、リアクションしてない板書を一覧化、
板書画面に表示
想定利用者	登録済み受講生
備考		同一ページ内処理のため、画面推移を行わない

ここまでのを要件定義書に写した
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

【保留にしていた問題機能について】
無し！

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
【外部設計】
追加する機能・変更機能
教師側
・右側にマーカーをクリックした際に、それに対するの理解度と、受講生が送った質問を表示させる（新着順か反応多い順で洗濯ができる）　アコーディオン式？

受講生側
　左側は教師側と同じで、
・右上に未回答アラートを追加する
・右下にマーカーをクリックした際に、それに対する受講生が送った質問と、質問送信スペースがある



マイページについてはまだ未解決



2024年6月11日（火）
今日の目標：外部設計の大枠を決める

予定
~12:00　認識合わせ
13:00~　外部設計書・機能一覧の作成


外部設計書・機能一覧・DB定義書ファイル
https://docs.google.com/spreadsheets/d/1eBi5kXfYpE7hxrJOv1pq6z1D-8LuPC6B7C-6GHLn2cg/edit?usp=sharing


メイン色
https://colorhunt.co/palette/faf2d3f4e8693085c35cd2e6

#FAF2D3

#F4E869

#3085C3
#5CD2E6

画面色
背景：FEFFEF
青枠：3085c3
水色枠：5cd2e6
グレー枠：D1D1D1
いいねのピンク：FF66CC
理解度：赤FF5050　オレンジFFC000　黄色FFFF00　青46B1E1
赤い文字：FF0000
マーカーの黄色：わからん


保留
ファイルのアップロードとダウンロード

機能設計

2024年6月12日（水）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：外部設計書の作成に取り掛かる
本日の予定
午前　2グループに分かれて昨日の続き
午後　午前と同様、2グループに分かれて機能の続き

〇機能一覧
　・「機能概要」の作成
　・「Servlet」の作成

▼…疑問点
 ■…疑問点解決後メモ
◎…外部設計書の内容とのすり合わせ内容
◆…未解決事項
〇…提案内容？
グレーの文字…内容が変わったもの

▼テキスト形式の保存
└中をすべてコピーして保存？スクショ？
■板書機能
　マイページから板書一覧を閲覧(ハイパーリンク)
　ホーム画面にボタンを設置
　　⇒クリックすると指定範囲内の板書がマイページのハイパーリンクとして保存される
　上書き保存あり
　新規作成(new)ボタン(講師用)⇒理解度・コメントは同時に保存
　保存ボタン
　上書きボタン？⇒自動保存で良き
　　└更新相手の番号が変わる⇒自動的にINSERT⇒SELECT表示
　板書の履歴をクリックしたらホーム画面に飛ぶ⇒上書きができるようになったら…
　　└マイページのハイパーリンク(日付)をクリックしたら閲覧用のページに飛ぶ
　授業中に当日の板書を
保存ボタンをクリックしたら保存されるだけ
⇒画面変化なし
新規作成ボタンをクリックしたら白紙

■リアルタイムのコメントの表示期間
「板書切り替えボタン」をクリックしたら保存+新規作成
└コメントなどは全て白紙化

◎(外部設計組内容)マイページ内のハイパーリンク一覧表示の内容
└保存名はマイページ内で変更可能
　「画面切り替え」ボタンをクリックした際の保存名は保存した日の「日付・時間」


〇改行を保持したままマーカー部分表示
マーカーは受講生画面から閲覧できない
講師がマーカー引いた部分を右側の画面にペーストするイメージ

講師側
打ち終わった後3秒後などに更新

理解度のコメント、リアクションの投稿者を表示
⇒講師用マイページのハイパーリンクをクリックした場合

講師
⇒リアクション送信可能⇒どこまで解説したかを判断するためにリアクション可能にする
・グラフをクリックした場合
　⇒グラフを文字に変更？
一目で理解度が分かる利点を残しておきたい！
　⇒グラフを可能な限り小さくしたい
　⇒グラフの隣にボタンを設定⇒グラフのサイズを小さくできる

▼一つの画面内で複数のServletを動かせるかどうか？
└先生へ質問⇒質問済み
└組み合わせる方法と仕組み
⇒menuでdoGetされたときに他のServletが自動的にdoGetする方法があるか？

マイページは前提として復習用
学生側(マイページ)
講師側(マイページ)
・板書の履歴
・(累計)理解度解答(リアクション)の履歴
　└日付選択
　└ソート可能
　└項目一覧(ハイパーリンク)を
　　クリックすると単語毎にグラフ表示
　　　⇒(100%横棒グラフ)
　└(自分の)全体の理解度→「確認」を
　　クリックすると
　　(自分の)全体の累計理解度グラフ表示
　　　⇒累計理解度(円グラフ)
 
・板書の履歴
・理解度解答(コメント)の履歴表示
　└◆名前表示あり
　　　(実装されるかは現状不明)
・理解度解答(リアクション)の履歴表示
　└◆名前表示あり
　　　(実装されるかは現状不明)
　　⇒どちらも学生の名前が
　　　(ウェビナー講師から)分かる
　　　メリットが不明
 ・板書毎出せるか？
 ・新着順などの内容でソートできると良き
 　理解度⇒戻るボタン・更新ボタン
・項目一覧
・ホーム/項目一覧の下に板書一覧を追加
・「ホーム」項目をなくしてトップが「板書一覧」になるようにしてほしい。
▼ログイン⇒板書ページ？マイページ？
　⇒ログイン→板書履歴(マイページ代替)
・過去の板書の扱い（後から見た場合、更新できるのか出来ないのか、出来るようにするとして「書き換えボタン」を用意したい。）
・理解度累計の円グラフの場所（過去の板書と同じは邪魔じゃね？）
案：項目一覧に置き、グラフと時間順で並び替える。
・マイページ→板書履歴、理解度履歴
▼過去の板書に書き足せる？
　└書き足し機能なし⇒閲覧用で編集なし
　　文字のみ書かれているようなイメージ
・右上に板書の名前が表示される
・「マイページ」⇒「履歴」
▼円グラフと時系列は別ページ？
　└別ページ
マーカー部分を「送信ボタン」をクリック⇒学生の方に飛んでいくスタイル


◆スクロールバーで上がってた時に新たなコメントが投稿された場合は？⇒未解決事項
└毎秒更新の場合=コメント表示できなくなる可能性、過去のコメントを遡れなくなる
　⇒(問題)常に更新され続けるだけのページになる
　⇒閲覧専用画面になる⇒コメント投稿すらできなくなる
　◇自動更新で自分が入力して送信ボタンをクリックすると更新

(※ 下記は写真の内容)
Servlet1個
ログイン→LoginServlet→合格→リダイレクト
⇒MenuServlet→DAO(複数必要)から取得→リクエストに設置
⇒Menu.jspで表示
└(問題)IDだけで情報をすべて取得
⇒ajaxで細分化して一部分を其々更新することが可能(EL式など)

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
<明日>
・マイページの内容すり合わせ
└現状の外部設計の確認と現状の機能設計の内容を確認⇒細分化して再度構成する




2024年6月13日（木）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：それぞれ役割を自覚し、作業するよう心掛ける

本日の予定
午前　2グループに分かれて昨日の続き
午後　午前と同様、2グループに分かれて機能の続き
　　　（15:30～　講師からのレビュー）

・マイページの内容すり合わせ
└現状の外部設計の確認と現状の機能設計の内容を確認⇒細分化して再度構成する


**************************************************************************************************


2024年6月14日（金）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：外部設計をいったん完成させ、講師の方に見てもらう

本日の予定
11:00-　外部設計とDB設計に分かれ作業
昼前に一度現状報告...済

13:00-15:00 外部設計は一通り完成
DBの内容を一度共有する...済

15:00-　各自作業
(外部設計のDB欄の記載開始)

外部設計
すべてのページの外部設計書を一通り書き上げる

データベースを用いて表示する部分を追加する。

・機能名・物理名の統一
マーカーコメント　オールコメントに統一
→DBに統一させたい



15:30からの議題　DBについて
理解度の登録を行う際にどのように処理し、カウントを行うか
案1　四段階評価のテーブルを別途作成しフラグに処理させる番号を1-4にして各数をカウント
→updateで更新が可能であり、未登録フラグをいれることで未登録項目の判断が可能
…すべてのユーザーのすべてのリアクションのデータを一気に作成しなくてはいけない
案2　インサート数で判断する
→ユーザーIDとコメントIDで登録してそもそものデータ数で判断。

いいね数の表示は案2の採用

→理解度の登録をどうするか...？


2024年6月17日（月）
担当：佐藤
目標：外部設計書のチェックの突破

チーム記号：A1
チーム名：knight
アプリ名：くらすぼーど
アプリ概要：コミュニケーションの取れる板書アプリ
主な機能と担当：板書機能、マーカー機能、コメント機能、リアクション機能、履歴閲覧機能など

内部要件書を作成しましょう。
シート名や項目名などで「level・lebel・mark」などの表記ゆれがあるので、「marker」に統一します。

理解度履歴　ajax　齋田
登録ページ　　　jsp担当と同じ人　佐藤
ログインページ　jsp担当と同じ人　赤澤
板書の履歴一覧　土田
過去板書の閲覧　伊藤

2024年6月18日（火）
本日のチーム目標
長期:和気藹々とした雰囲気で発言しやすい雰囲気を作る
短期:それぞれがやるべきことを行う

本日の予定
・内部設計組　・java講義組

成果
・サーブレットとJSPをつなげた
・モデルとDAOを進めた

・メソッドの基礎を学んだ




2024年6月19日（水）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：Servletに着手し、完成に向けて其々の内容を進行する

午前：Dao、Servletの修正、作成

Dao の作成
blackboardのDAOを作成しました。

marker recのDAOを作成したい。

2024年6月20日（木）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：1人1つのServletを完成させる

本日の予定
午前：其々の割り当てられた内容を遂行する
午後：午前に引き続き、割り当て内容を遂行する

【6/21の研修開始前までの課題】
・其々のテーブルを作成(DB定義書のcreateタブにある構文をコピー)
・〈black_board〉テーブルの内容をINSERT
・〈TUserRegistServlet〉を実行して其々の内容に値を入力して作成したテーブルに
　　データがINSERTされているか確認(h2を再度接続して確認)
　　　　└(秋山くんが6/21の00:30に送ってくれたSlackのメッセージに詳細)
↑一度pullってから実行



【6/22までの課題】
・花凛ちゃんに自分の担当箇所を報告
【6/24の研修実地日までの課題】⇒初リハーサル予定日
・自分の担当個所（個人の成果）について、最低限30秒～1分程度はお話しできるようにしておく


2024年6月21日（金）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：それぞれの目標を設定し、役割を果たす。
伊藤
本日の予定
午前：各自のservletを完成させる　発表の担当を割り振る
午後：発表資料を作成する

発表資料
A1 発表資料.pptx (sharepoint.com)


＜挨拶・チーム名の由来・場をあっためる＞・・・2分
由来…全員の頭文字からknight  他になかったから苦肉の策　齋田​
こんなメンバーのグループだよ　口頭で一人一人の紹介はしない　赤澤

＜作成したプログラムについて＞		・・・10分
ペルソナの紹介樋口さん 　　　　　土田	​・・・1分強
目的（○○を○○したい！的な）　　　伊藤​	・・・1分
アプリの概要　　　　　		伊藤	・・・1分
機能面とくに頑張ったところAjax　	秋山	・・・2分​

デモ　ログイン・新規登録　誰でも　秋山（操作説明）​	・・・30秒
	板書画面　コメント齋田　マーク赤沢　板書土田​	・・・2分
	履歴画面　伊藤　佐藤				・・・2分→機能減れば1分？


＜プロジェクト進行で苦労した点、対応策、結果、学んだ点など＞　・・・ひとり１分ずつ
リーダー​
DB担当
品質管理…こんなバグ出たよ～とか出なかったよ～で、理由や考察も（1分あるかないかくらい）


＜個人の成果＞全員	・・・６人×30秒～1分　計３～６分

＜総括＞　　　秋山　・・・1分

＜質疑応答＞		・・・5分

プレゼンスライド
https://seplus2016-my.sharepoint.com/:p:/g/personal/saida-karin-plusdojo2024_seplus2016_onmicrosoft_com/EV1J6Rg3K35Dpu2vIK9S1KYBj19i08BFjQH5Uq4feZMxaA?e=nAMFjV


2024年6月24日（月）


長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：発表に向けて各自の話す内容を決め自主的に考えるための地盤を固める。

本日の予定
午前:
午後:

動画フロー
新規登録：片方画面
↓
ログイン：片方画面
↓
メイン画面(板書)：講師画面と受講生画面
　└講師画面で記入した内容を受講生画面で反映されることを表示
↓
メイン画面(マーカー)：　講師画面と受講生画面
　└講師画面でマーカーを設定した部分が受講生画面にも反映されることを表示
　　(マーカーの理解度のグラフが【受講生の画面】で表示)
↓
メイン画面(コメント)：講義画面と受講生画面
　└マーカーに対するコメントと全体コメントを表示
↓
履歴：片方
　└過去の板書(保存された板書)を表示⇒日付をクリック

【フロー】
新規登録　⇒　ログイン
⇒　メイン画面(板書)　⇒　メイン画面(マーカー)　⇒　メイン画面(コメント)
⇒　履歴画面

2024年6月25日（火）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：発表内容だけでなく、各自の話し方や言い回しにまで意識を向けて練習をする

斎田さん...個人の成果と動画の原稿 10:30
終わり次第パワポ

赤澤さん...個人成果変更済み
動画の原稿　10:30

伊藤君...目的と概要　11:00

土田さん...個人の成果ペルソナ変更済み
動画の原稿　10:30

秋山...残りのプログラミング　12:00までにおわるといいな

2024 6/26
9:30 現状の報告
(CSSに関して何か新しくやる要素はあるか)
10:00　cssの最終確認
-12:00

13:00 動画の簡易的な製作
(写真のスライドショー)
-15:00
15:00 現行の手直し
16:00 発表リハ(3回目)

午前中
斎田さん、赤澤さん、土田さん→スライドの手直し
佐藤君、伊藤君→原稿の手直し

-やってほしいこと-
zoom背景の作成
スライドの手直し
配布資料の作成




1. 提案依頼書（RFP）
1.1 プロジェクトの背景
リモートでの講義が増加する中、講師と受講生のリアルタイムなコミュニケーションと理解度の把握が重要になっています。そこで、リモート講義の質を向上させるためのアプリケーションを提案します。

1.2 目的
このプロジェクトの目的は、講師がリアルタイムで受講生の理解度を把握し、適切なフィードバックを提供することで、リモート講義の効果を最大化することです。

1.3 提案依頼内容
以下の機能を持つアプリケーションの設計、開発、導入を提案します。
リアルタイム板書共有機能：講師の板書内容をリアルタイムで共有。
リアルタイム理解度確認機能：講師がMarkerをひいた部分に対して理解度を受講生に問いかける。
リアルタイムメッセージ確認機能：受講生が講師にメッセージを直接送信。
板書履歴の確認：過去の板書の内容を




1.4 提案要件
技術要件：Webベースのアプリケーション。フロントエンドはReactまたはVue.js、バックエンドはNode.jsまたはPython。
セキュリティ要件：データの暗号化、ユーザー認証、アクセス制御。
スケーラビリティ要件：将来的に1000人以上の同時接続をサポート。
1.5 提案プロセス
提案書の提出：2024年7月31日まで。
プレゼンテーション：2024年8月15日。
結果発表：2024年8月31日。
2. プレゼンテーション資料
2.1 タイトルスライド
プロジェクト名：リアルタイム講義支援アプリ
提案者：あなたの名前
日付：2024年7月31日
2.2 アジェンダ
プロジェクトの背景
目的と目標
アプリケーションの概要
各機能の詳細
技術スタック
開発スケジュール
質疑応答
2.3 プロジェクトの背景
リモート講義の普及と課題
現在のコミュニケーションツールの限界
2.4 目的と目標
リアルタイムな受講生の理解度把握
双方向のコミュニケーション促進
講義の効果を最大化
2.5 アプリケーションの概要
リアルタイム板書共有機能
リアルタイム理解度確認機能
リアルタイムメッセージ確認機能
いいね機能
2.6 各機能の詳細
リアルタイム板書共有機能：
講師の板書をリアルタイムで受講生に配信
受講生が板書を確認できるインターフェース
リアルタイム理解度確認機能：
Markerをひいた部分に対して理解度を問いかける
受講生が理解度をリアクションボタンで返答
リアルタイムメッセージ確認機能：
受講生が直接メッセージを講師に送信
講師がリアルタイムでメッセージを確認
いいね機能：
受講生が講義内容に対していいねボタンを押す
講師がリアクションをリアルタイムで把握
2.7 技術スタック
フロントエンド：ReactまたはVue.js
バックエンド：Node.jsまたはPython
データベース：MongoDBまたはMySQL
リアルタイム通信：WebSocketまたはSocket.IO


2.8 開発スケジュール
2024年7月：要件定義
2024年8月：設計
2024年9月：開発開始
2024年12月：ベータ版リリース
2025年2月：正式リリース


3. その他の書類
3.1 プロジェクト計画書
プロジェクトの目的、範囲、成果物、スケジュール、リソース、リスク管理などを詳細に記載。
3.2 技術仕様書
アプリケーションのアーキテクチャ、使用技術、API仕様、データベース設計、セキュリティ対策などを詳細に記載。
3.3 テスト計画書
単体テスト、結合テスト、システムテスト、ユーザビリティテストの計画と実施方法を記載。
これらの資料を基に、コンペに向けて準備を進めてください。ビジュアルや具体例を追加することで、より説得力のあるプレゼンテーションに仕上げることができます。頑張ってください！


2024年6月26日（水）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：細かいところにも目を向け、手を抜かずに資料を作成する

発表練習！！！
2024年6月27日（木）
長期目標：メンバー全員の認識の齟齬がない様に心掛け、全員が納得するアプリを作成する
今日の目標：

発表練習！！！！
